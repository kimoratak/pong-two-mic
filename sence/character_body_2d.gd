extends CharacterBody2D

## Movement & Physics üèÉ
@export var speed := 180.0
@export var acceleration := 600.0
@export var friction := 800.0
@export var air_acceleration_multiplier := 0.7 # ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏Å‡∏•‡∏≤‡∏á‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡πÑ‡∏î‡πâ‡∏ä‡πâ‡∏≤‡∏Å‡∏ß‡πà‡∏≤‡∏ö‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢
@export var gravity_scale := 800.0

## Jumping Mechanics ü§∏
@export var jump_velocity := -400.0
@export var max_jumps := 2
var jumps_used := 0

## Coyote Time üê∫
# (‡∏≠‡∏¢‡πà‡∏≤‡∏•‡∏∑‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏° Timer ‡∏ä‡∏∑‡πà‡∏≠ "CoyoteTimer" ‡πÉ‡∏ô Scene)
@onready var coyote_timer := $Timers/CoyoteTimer
var was_on_floor := false

## Player State
var facing_right := true
var has_gun := false
var vulnerable := true
#var health := 100

## Signals
signal shoot(pos: Vector2, direction: bool)

#-----------------------------------------------------------------------------

func _ready():
	Global.player_health = Global.max_player_health
	for child in $Fire.get_children():
		child.hide()

func _physics_process(delta: float):
	# 1. ‡πÉ‡∏ä‡πâ‡πÅ‡∏£‡∏á‡πÇ‡∏ô‡πâ‡∏°‡∏ñ‡πà‡∏ß‡∏á
	apply_gravity(delta)
	pase_game()
	reset_game()
	
	# 2. ‡∏£‡∏±‡∏ö Input ‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡πÇ‡∏î‡∏î
	handle_jump_input()
	
	# 3. ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏ß‡∏ô‡∏≠‡∏ô (‡∏û‡∏£‡πâ‡∏≠‡∏° Air Resistance)
	handle_horizontal_movement(delta)

	# 4. ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà
	move_and_slide()
	
	# 5. ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏´‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Coyote Time ‡πÅ‡∏•‡∏∞‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡πÇ‡∏î‡∏î)
	update_after_move()

	# 6. ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏†‡∏≤‡∏û‡πÅ‡∏•‡∏∞‡πÄ‡∏™‡∏µ‡∏¢‡∏á
	get_facing_direction()
	get_animation()
	handle_shoot_input() # ‡∏¢‡πâ‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏¢‡∏¥‡∏á‡∏°‡∏≤‡πÑ‡∏ß‡πâ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢
	
	# 7. ‡πÄ‡∏ä‡πá‡∏Ñ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏Å‡∏°
	check_death()

#-----------------------------------------------------------------------------

func apply_gravity(delta: float):
	if not is_on_floor():
		velocity.y += gravity_scale * delta

func handle_jump_input():
	# --- ‡∏ï‡∏£‡∏£‡∏Å‡∏∞‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡πÇ‡∏î‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (Coyote Time, Double Jump) ---
	if Input.is_action_just_pressed("jump") and (is_on_floor() or not coyote_timer.is_stopped() or jumps_used < max_jumps):
		if not is_on_floor() and not coyote_timer.is_stopped():
			# ‡∏ñ‡πâ‡∏≤‡πÉ‡∏ä‡πâ Coyote Jump ‡πÉ‡∏´‡πâ‡∏´‡∏¢‡∏∏‡∏î Timer ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
			coyote_timer.stop()
		
		velocity.y = jump_velocity
		jumps_used += 1
		$Sounds/JumpSound.play()

	# --- Variable Jump Height ---
	# ‡∏ñ‡πâ‡∏≤‡∏õ‡∏•‡πà‡∏≠‡∏¢‡∏õ‡∏∏‡πà‡∏°‡∏Å‡∏£‡∏∞‡πÇ‡∏î‡∏î‡∏ï‡∏≠‡∏ô‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏≠‡∏¢‡∏Ç‡∏∂‡πâ‡∏ô ‡πÉ‡∏´‡πâ‡∏Å‡∏£‡∏∞‡πÇ‡∏î‡∏î‡πÄ‡∏ï‡∏µ‡πâ‡∏¢‡∏•‡∏á
	if Input.is_action_just_released("jump") and velocity.y < 0:
		velocity.y *= 0.5

func handle_horizontal_movement(delta: float):
	var direction_x = Input.get_axis("left", "right")
	
	# --- Air Resistance (‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≤‡∏ô‡∏ó‡∏≤‡∏ô‡∏≠‡∏≤‡∏Å‡∏≤‡∏®) ---
	var current_accel = acceleration
	if not is_on_floor():
		current_accel *= air_acceleration_multiplier
	
	if direction_x != 0:
		# ‡∏Ñ‡πà‡∏≠‡∏¢‡πÜ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏à‡∏ô‡∏ñ‡∏∂‡∏á speed ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
		velocity.x = move_toward(velocity.x, speed * direction_x, current_accel * delta)
	else:
		# ‡∏Ñ‡πà‡∏≠‡∏¢‡πÜ ‡∏•‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏à‡∏ô‡∏´‡∏¢‡∏∏‡∏î (‡πÅ‡∏£‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏î‡∏ó‡∏≤‡∏ô)
		velocity.x = move_toward(velocity.x, 0, friction * delta)

func update_after_move():
	# ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡πÇ‡∏î‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÅ‡∏ï‡∏∞‡∏û‡∏∑‡πâ‡∏ô
	if is_on_floor():
		jumps_used = 0
	
	# --- Coyote Time ---
	# ‡∏ñ‡πâ‡∏≤‡πÄ‡∏ü‡∏£‡∏°‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏≠‡∏¢‡∏π‡πà‡∏ö‡∏ô‡∏û‡∏∑‡πâ‡∏ô ‡πÅ‡∏ï‡πà‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏π‡πà -> ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ô‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤ Coyote Time
	if was_on_floor and not is_on_floor():
		$Timers/CoyoteTimer.start()
	
	was_on_floor = is_on_floor()

func handle_shoot_input():
	if Input.is_action_just_pressed("shoot") and $Timers/CooldownTimer.is_stopped() and has_gun:
		shoot.emit(global_position, facing_right)
		$Timers/CooldownTimer.start()
		$Timers/FireTimer.start()
		$Fire.get_child(int(facing_right)).show()
		$Sounds/fireSound.play()

func get_facing_direction():
	# ‡∏´‡∏±‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡∏≤‡∏°‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡πÅ‡∏Ñ‡πà‡∏õ‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà‡∏Å‡∏î
	if abs(velocity.x) > 10.0:
		facing_right = velocity.x > 0

func get_animation():
	var animation = 'idle'
	if not is_on_floor():
		animation = 'jump'
	elif abs(velocity.x) > 10.0:
		animation = 'walk'
	
	if has_gun:
		animation += '_gun'
	
	$AnimatedSprite2D.animation = animation
	$AnimatedSprite2D.flip_h = not facing_right

func check_death():
	if Global.player_health <= 0:
		get_tree().paused = true
		$"../../UI/GameOver".show()
		

func get_damage(amount):
	if vulnerable:
		Global.player_health -= amount
		vulnerable = false
		$Timers/InvincibilityTimer.start()
		$Sounds/DamageSound.play()
		
		var tween = create_tween()
		tween.tween_property($AnimatedSprite2D, "material:shader_parameter/amount", 1.0, 0.0)
		tween.tween_property($AnimatedSprite2D, "material:shader_parameter/amount", 0.0, 0.1)

# --- Signal Callbacks ---

#func _on_cooldown_timer_timeout() -> void:
	## ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏±‡πâ‡∏á can_shoot = true ‡πÅ‡∏•‡πâ‡∏ß ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÄ‡∏£‡∏≤‡πÄ‡∏ä‡πá‡∏Ñ‡∏à‡∏≤‡∏Å is_stopped() ‡∏Ç‡∏≠‡∏á Timer ‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢
	#pass

func _on_fire_timer_timeout() -> void:
	for child in $Fire.get_children():
		child.hide()

func _on_invincibility_timer_timeout() -> void:
	vulnerable = true


func pase_game():
	if Input.is_action_just_pressed("PausedGame"):
		get_tree().paused =true
		$"../../UI/PausedGame".show()
func reset_game():
	if Input.is_action_just_pressed("reset_level"):
		var currentlevel = get_tree().current_scene.scene_file_path
		print(currentlevel)
		ScoreManager.reset_score()
		get_tree().change_scene_to_file(currentlevel)
